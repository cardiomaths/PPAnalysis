outStab[[i]] <- matrix(0, n, length(ini))
for (i in 1:length(param.seq)) {
# set params
parameters[param.index] <- param.seq[i]
# converge
init <- ode(ini, times, model, parameters) #it is now converging
# get converged points
ini=init[n,-1]
outStab[[i]] <- ode(y=ini, times=times, func=model, parms=parameters)[,-1]
}
range.lim <- lapply(outStab, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- "Z2" # choose which variable to show
plot(0, 0, pch = "", xlab = param.name, ylab = plot.variable,
xlim = range(param.seq), ylim = c(0,1))
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), outStab[[i]][,plot.variable], pch=19)
}
n <- length(times) # number of simulations
param.name <- "phi" # choose parameter to perturb
param.seq <- seq(0.5,1,length = 50) # choose range of parameters
param.index <- which(param.name == names(parameters))
outStab <- list()
for (i in 1:length(param.seq))
outStab[[i]] <- matrix(0, n, length(ini))
for (i in 1:length(param.seq)) {
# set params
parameters[param.index] <- param.seq[i]
# converge
init <- ode(ini, times, model, parameters) #it is now converging
# get converged points
ini=init[n,-1]
outStab[[i]] <- ode(y=ini, times=times, func=model, parms=parameters)[,-1]
}
range.lim <- lapply(outStab, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- "Z2" # choose which variable to show
plot(0, 0, pch = "", xlab = param.name, ylab = plot.variable,
xlim = range(param.seq), ylim = c(0,1))
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), outStab[[i]][,plot.variable], pch=19)
}
library(deSolve)
times <- seq(from = 0, to = 100, by = 0.1)
ini <- c(Z1 = 0.5,
Z2 = 0)
parameters <- c(nu = 1,
phi = 0.5,
beta = 0.33,
betam = 0.33,
chi = 1,
ga = 1,
gm = 1)
model <- function (t, ini, parmameters) {
with(as.list(c(ini, parameters)), {
dZ1 <- nu*Z1^2/(beta^2+Z1^2) - ga*Z1 - phi*Z1*Z2
dZ2 <- (chi*Z1^2)/(betam^2+Z1^2) - gm*Z2
#dZ2 <- 0
# return
list(c(dZ1, dZ2))
})
}
parameters <- c(nu = 1,
phi = 1,
beta = 0.33,
betam = 0.33,
chi = 1,
ga = 1,
gm = 1)
out <- ode(y = ini, times = times, func = model, parms = parameters)
plot((out[,1]),(out[,2]),type = "l", lwd = 2, lty=1, xlab="time", ylab="Neutrophils", xlim=c(0.0,100), ylim=c(0,1), col="red")
lines((out[,1]),(out[,3]),type = "l", lwd = 2, lty=2, col="blue")
n <- length(times) # number of simulations
param.name <- "phi" # choose parameter to perturb
param.seq <- seq(0.5,1,length = 50) # choose range of parameters
param.index <- which(param.name == names(parameters))
outStab <- list()
for (i in 1:length(param.seq))
outStab[[i]] <- matrix(0, n, length(ini))
for (i in 1:length(param.seq)) {
# set params
parameters[param.index] <- param.seq[i]
# converge
init <- ode(ini, times, model, parameters) #it is now converging
# get converged points
ini=init[n,-1]
outStab[[i]] <- ode(y=ini, times=times, func=model, parms=parameters)[,-1]
}
range.lim <- lapply(outStab, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- "Z2" # choose which variable to show
plot(0, 0, pch = "", xlab = param.name, ylab = plot.variable,
xlim = range(param.seq), ylim = c(0,1))
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), outStab[[i]][,plot.variable], pch=19)
}
n <- length(times) # number of simulations
param.name <- "phi" # choose parameter to perturb
param.seq <- seq(0.5,1.5,length = 50) # choose range of parameters
param.index <- which(param.name == names(parameters))
outStab <- list()
for (i in 1:length(param.seq))
outStab[[i]] <- matrix(0, n, length(ini))
for (i in 1:length(param.seq)) {
# set params
parameters[param.index] <- param.seq[i]
# converge
init <- ode(ini, times, model, parameters) #it is now converging
# get converged points
ini=init[n,-1]
outStab[[i]] <- ode(y=ini, times=times, func=model, parms=parameters)[,-1]
}
range.lim <- lapply(outStab, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- "Z2" # choose which variable to show
plot(0, 0, pch = "", xlab = param.name, ylab = plot.variable,
xlim = range(param.seq), ylim = c(0,1))
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), outStab[[i]][,plot.variable], pch=19)
}
parameters <- c(nu = 1,
phi = 1.2,
beta = 0.33,
betam = 0.33,
chi = 1,
ga = 1,
gm = 1)
out <- ode(y = ini, times = times, func = model, parms = parameters)
plot((out[,1]),(out[,2]),type = "l", lwd = 2, lty=1, xlab="time", ylab="Neutrophils", xlim=c(0.0,100), ylim=c(0,1), col="red")
lines((out[,1]),(out[,3]),type = "l", lwd = 2, lty=2, col="blue")
parameters <- c(nu = 1,
phi = 1.2,
beta = 0.33,
betam = 0.33,
chi = 1,
ga = 1,
gm = 1)
ini <- c(Z1 = 0.5,
Z2 = 0)
out <- ode(y = ini, times = times, func = model, parms = parameters)
plot((out[,1]),(out[,2]),type = "l", lwd = 2, lty=1, xlab="time", ylab="Neutrophils", xlim=c(0.0,100), ylim=c(0,1), col="red")
lines((out[,1]),(out[,3]),type = "l", lwd = 2, lty=2, col="blue")
parameters <- c(nu = 1,
phi = 1.25,
beta = 0.33,
betam = 0.33,
chi = 1,
ga = 1,
gm = 1)
ini <- c(Z1 = 0.5,
Z2 = 0)
out <- ode(y = ini, times = times, func = model, parms = parameters)
plot((out[,1]),(out[,2]),type = "l", lwd = 2, lty=1, xlab="time", ylab="Neutrophils", xlim=c(0.0,100), ylim=c(0,1), col="red")
lines((out[,1]),(out[,3]),type = "l", lwd = 2, lty=2, col="blue")
parameters <- c(nu = 1,
phi = 1.3,
beta = 0.33,
betam = 0.33,
chi = 1,
ga = 1,
gm = 1)
ini <- c(Z1 = 0.5,
Z2 = 0)
out <- ode(y = ini, times = times, func = model, parms = parameters)
plot((out[,1]),(out[,2]),type = "l", lwd = 2, lty=1, xlab="time", ylab="Neutrophils", xlim=c(0.0,100), ylim=c(0,1), col="red")
lines((out[,1]),(out[,3]),type = "l", lwd = 2, lty=2, col="blue")
parameters <- c(nu = 1,
phi = 1.28,
beta = 0.33,
betam = 0.33,
chi = 1,
ga = 1,
gm = 1)
ini <- c(Z1 = 0.5,
Z2 = 0)
out <- ode(y = ini, times = times, func = model, parms = parameters)
plot((out[,1]),(out[,2]),type = "l", lwd = 2, lty=1, xlab="time", ylab="Neutrophils", xlim=c(0.0,100), ylim=c(0,1), col="red")
lines((out[,1]),(out[,3]),type = "l", lwd = 2, lty=2, col="blue")
parameters <- c(nu = 1,
phi = 1.29,
beta = 0.33,
betam = 0.33,
chi = 1,
ga = 1,
gm = 1)
ini <- c(Z1 = 0.5,
Z2 = 0)
out <- ode(y = ini, times = times, func = model, parms = parameters)
plot((out[,1]),(out[,2]),type = "l", lwd = 2, lty=1, xlab="time", ylab="Neutrophils", xlim=c(0.0,100), ylim=c(0,1), col="red")
lines((out[,1]),(out[,3]),type = "l", lwd = 2, lty=2, col="blue")
parameters <- c(nu = 1,
phi = 1.29,
beta = 0.3,
betam = 0.3,
chi = 1,
ga = 1,
gm = 1)
ini <- c(Z1 = 0.5,
Z2 = 0)
out <- ode(y = ini, times = times, func = model, parms = parameters)
plot((out[,1]),(out[,2]),type = "l", lwd = 2, lty=1, xlab="time", ylab="Neutrophils", xlim=c(0.0,100), ylim=c(0,1), col="red")
lines((out[,1]),(out[,3]),type = "l", lwd = 2, lty=2, col="blue")
parameters <- c(nu = 1,
phi = 1.29,
beta = 0.33,
betam = 0.33,
chi = 1,
ga = 1,
gm = 1)
ini <- c(Z1 = 0.5,
Z2 = 0)
out <- ode(y = ini, times = times, func = model, parms = parameters)
plot((out[,1]),(out[,2]),type = "l", lwd = 2, lty=1, xlab="time", ylab="Neutrophils", xlim=c(0.0,100), ylim=c(0,1), col="red")
lines((out[,1]),(out[,3]),type = "l", lwd = 2, lty=2, col="blue")
df <-
read.csv("data/FACSsummary96wells.csv",
stringsAsFactors = FALSE,
header = TRUE)
print(head(names))
#df.fib.ADP <- subset(df, )
df <-
read.csv("data/FACSsummary96wells.csv",
stringsAsFactors = FALSE,
header = TRUE)
print(head(df))
#df.fib.ADP <- subset(df, )
df <-
read.csv("data/FACSsummary96wells.csv",
stringsAsFactors = FALSE,
header = TRUE)
print(head(df))
df.fib <- subset(df, output == "fibrinogen")
df.fib.ADP <- subset(df.fib, agonist == "ADP")
df <-
read.csv("data/FACSsummary96wells.csv",
stringsAsFactors = FALSE,
header = TRUE)
print(head(df))
df <- subset(df, measure == "MedianFI")
df.fib <- subset(df, output == "fibrinogen")
df.fib.ADP <- subset(df.fib, agonist == "ADP")
df <-
read.csv("data/FACSsummary96wells.csv",
stringsAsFactors = FALSE,
header = TRUE)
print(head(df))
df <- subset(df, measure == "MedianFI")
df.fib <- subset(df, output == "fibrinogen")
df.fib.ADP <- subset(df.fib, agonist == "ADP")
df <-
read.csv("data/FACSsummary96wells.csv",
stringsAsFactors = FALSE,
header = TRUE)
print(head(df))
df <- subset(df, measure == "MedianFI")
df.fib <- subset(df, output == "fibrinogen")
df.fib.ADP <- subset(df.fib, agonist == "ADP")
print(head(df.fib.ADP))
plot(df$EC50Cap,df$maxGainCap)
plot(df$EC50Cap,df$maxGainCap, pch=19)
plot(df$EC50Cap,
df$maxGainCap,
pch=19,
xlab="EC50",
ylab="maxGain")
plot(df.fib.ADP$EC50Cap,
df.fib.ADP$maxGainCap,
pch=19,
xlab="EC50",
ylab="maxGain")
library("ggpubr")
ggscatter(df.fib.ADP,
x = "EC50Cap",
y = "maxGainCap",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "EC50", ylab = "maxGain")
ggscatter(df.fib.ADP,
x = "EC50Cap",
y = "maxGainCap",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "EC50", ylab = "maxGain")
# create the initial x variable
x1 <- rnorm(100, 15, 5)
print(x1)
# create the initial x variable
x1 <- rnorm(10, 15, 5)
print(x1)
# create the initial x variable
x1 <- rnorm(10, 15, 5)
x2 <- scale(matrix( rnorm(10), ncol=2 ))
print(x1)
# create the initial x variable
x1 <- rnorm(10, 15, 5)
x2 <- scale(matrix( rnorm(10), ncol=2 ))
x12 <- cbind(scale(x1),x2)
# create the initial x variable
x1 <- rnorm(10, 15, 5)
x2 <- rnorm(10, 15, 5)
x12 <- cbind(scale(x1),x2)
plot(x12$x2,x12$x1)
# create the initial x variable
x1 <- rnorm(10, 15, 5)
x2 <- rnorm(10, 15, 5)
x12 <- cbind(x1,x2)
plot(x12$x2,x12$x1)
# create the initial x variable
x1 <- rnorm(10, 15, 5)
x2 <- rnorm(10, 15, 5)
x12 <- cbind(x1,x2)
print(x12)
# create the initial x variable
x1 <- rnorm(10, 15, 5)
x2 <- x1
x12 <- cbind(x1,x2)
print(x12)
# create the initial x variable
x1 <- rnorm(10, 15, 5)
x2 <- x1
x12 <- as.dataframe(cbind(x1,x2))
# create the initial x variable
x1 <- rnorm(10, 15, 5)
x2 <- x1
x12 <- data.frame(cbind(x1,x2))
plot(x12)
# create the initial x variable
x1 <- rnorm(10, 15, 5)
print(x1)
x2 <- x1
x12 <- data.frame(cbind(x1,x2))
plot(x12)
# create the initial x variable
x1 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x2 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x3 <- c(23.494921, 13.406617,  6.518704, 14.183749, 12.067881,  8.283104,  4.229638,  5.462842, 25.188480, 10.233479)
x12 <- data.frame(cbind(x1,x2,x3))
plot(x12)
# create the initial x variable
x1 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x2 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x3 <- c(23.494921, 13.406617,  6.518704, 15.683749, 12.067881,  8.283104,  4.229638,  5.462842, 25.188480, 10.233479)
x12 <- data.frame(cbind(x1,x2,x3))
plot(x12)
# create the initial x variable
x1 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x2 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x3 <- c(23.494921, 13.406617,  6.518704, 15.683749, 12.067881,  8.283104,  5.829638,  5.462842, 25.188480, 10.233479)
x12 <- data.frame(cbind(x1,x2,x3))
plot(x12)
# create the initial x variable
x1 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x2 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x3 <- c(23.494921, 13.406617,  6.518704, 15.683749, 12.067881,  8.283104,  5.829638,  5.462842, 25.588480, 10.233479)
x12 <- data.frame(cbind(x1,x2,x3))
plot(x12)
ggscatter(df,
x = "x1",
y = "x2",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "x1", ylab = "x2")
# create the initial x variable
x1 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x2 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x3 <- c(23.494921, 13.406617,  6.518704, 15.683749, 12.067881,  8.283104,  5.829638,  5.462842, 25.588480, 10.233479)
df <- data.frame(cbind(x1,x2,x3))
pprint(df)
# create the initial x variable
x1 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x2 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x3 <- c(23.494921, 13.406617,  6.518704, 15.683749, 12.067881,  8.283104,  5.829638,  5.462842, 25.588480, 10.233479)
df <- data.frame(cbind(x1,x2,x3))
print(df)
ggscatter(df,
x = "x1",
y = "x2",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "x1", ylab = "x2")
ggscatter(df,
x = "x1",
y = "x3",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "x1", ylab = "x2")
# create some dummy data, x1 and x2 are perfectly correlated, x3 is similar but has a little more variability
x1 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x2 <- c(23.494921, 12.406617,  6.518704, 14.683749, 12.067881,  7.283104,  4.829638,  6.462842, 25.188480, 10.233479)
x3 <- c(23.494921, 13.406617,  6.518704, 15.683749, 12.067881,  8.283104,  5.829638,  5.462842, 25.588480, 10.233479)
df <- data.frame(cbind(x1,x2,x3))
plot(df)
cor.test{df}
cor.test(df)
cor.test(df$x1,df$x2)
cor.test(df$x1,df$x3)
source('~/Desktop/gui/Ui.R')
runApp('Desktop/gui')
source('~/Desktop/gui/Ui.R')
#library(tidyr)
#library(ggplot2)
#library(factoextra)
#library(FactoMineR)
#library(ggbiplot)
#library(corrplot)
#library(dplyr)
df.temp <-
gather(df, desc, metric, c("Sensitivity", "Capacity"))
library(tidyr)
#library(ggplot2)
#library(factoextra)
#library(FactoMineR)
#library(ggbiplot)
#library(corrplot)
#library(dplyr)
df.temp <-
gather(df, desc, metric, c("Sensitivity", "Capacity"))
library(tidyr)
#library(ggplot2)
#library(factoextra)
#library(FactoMineR)
#library(ggbiplot)
#library(corrplot)
#library(dplyr)
df.temp <-
gather(df, desc, metric, c("Sensitivity", "Capacity"))
df <-
read.csv('../outputs/SummaryStats/summaryFileCohort1V2.csv',
stringsAsFactors = FALSE,
header = TRUE)
df <- subset(df, measure == "MedianFI")
df <- df[,c("donor","output","agonist","Sensitivity","Capacity")]
#Exclude unwanted data
df <- subset(df, agonist != "epinephrine")
df <- subset(df, agonist != "U46619")
#Removing hyphens from variable names
df[df$agonist=="TRAP-6","agonist"]<-"TRAP"
df[df$output=="P-selectin","output"]<-"Pselectin"
df.temp <-
gather(df, desc, metric, c("Sensitivity", "Capacity"))
df.temp$wrapfacilitator <- paste(df.temp$output, df.temp$desc, df.temp$agonist,sep="_")
df.temp <- df.temp[,c("donor","wrapfacilitator","metric")]
df.wide <- spread(df.temp, wrapfacilitator, metric)
df.wide <- df.wide %>% drop_na()
df.wide.res <- as.data.frame(scale(df.wide[,-1]))
rownames(df.wide.res) <- df.wide[,1]
df.wide <- cbind(df.wide[,1],df.wide.res)
pca <- prcomp(df.wide.res, scale=TRUE)
pca.alt <- princomp(df.wide.res)
print(summary(pca))
print(summary(pca.alt))
p <- fviz_eig(pca,
addlabels = TRUE,
hjust = -0.3,
barfill="white",
barcolor ="darkblue",
linecolor ="red") +
ylim(0, 50) +
theme_minimal()
library(tidyr)
#library(ggplot2)
library(factoextra)
library(FactoMineR)
#library(ggbiplot)
#library(corrplot)
#library(dplyr)
p <- fviz_eig(pca,
addlabels = TRUE,
hjust = -0.3,
barfill="white",
barcolor ="darkblue",
linecolor ="red") +
ylim(0, 50) +
theme_minimal()
p +
labs(title = "Screeplot - Methods",
x = "Principal Components", y = "% of variances")
#dev.off()
fviz_pca_var(pca.alt)
fviz_pca_var(pca.alt, axes = c(1, 3))
fviz_pca_ind(pca,
geom="text",
repel = TRUE
) +
xlab(expression("low responder" %<->% "high responder")) +
ylab(expression("higher capacity" %<->% "higher sensitivity")) +
labs(title ="Principal components 1 & 2")  +
theme_minimal() + theme(legend.position="none", text = element_text(size=15), plot.title = element_text(hjust = 0.5, vjust=3))
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
setwd("/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission")
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/runFigures.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/runFigures.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/runFigures.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/runFigures.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/runFigures.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/runFigures.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/R/PlotCorrelations.R')
source('/media/joe/37eed664-d106-47da-93a9-2f550f1b5f73/Dropbox/PPAnalysisSubmission/runFigures.R')
source('~/git/PPAnalysisTest/R/processSummary.R')
setwd("~/git/PPAnalysisTest")
source('~/git/PPAnalysisTest/runAll.R')
